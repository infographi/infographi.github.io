---
// The `BaseComponent` in Astro is designed for high customizability and modularity, achieved through a blend of Astro's component architecture and modern CSS techniques. Here's an overview of its functionality and the advantages of the techniques employed:

// ### Functionality of `BaseComponent`

// 1. **Dynamic Styling with Props**: The component allows passing various styling options as props (like `borderColor`, `borderStyle`, `padding`, etc.). These props are used to set CSS variables dynamically, enabling real-time customization of the component's appearance.

// 2. **Default Style Values**: For each styling prop, a default value is provided, ensuring the component has a consistent and sensible appearance out of the box. These default values are set as fallbacks in CSS variables.

// 3. **Scoped CSS with CSS Variables**: The component uses scoped CSS, which means its styles are isolated and won't affect or be affected by other elements outside the component. CSS variables are employed to apply the styles dynamically based on the props, offering a balance between default styling and customizability.

// 4. **Slots for Content Projection**: A slot is used within the component, allowing users to insert any HTML content. This makes the component versatile, as it can adapt to various content types and structures.

// ### Advantages of Used Techniques

// 1. **Customization**: The use of props to dynamically set CSS variables allows for extensive customization. Users can alter the look and feel of the component on the fly, making it adaptable to different contexts and themes.

// 2. **Maintainability**: With clear separation of concerns (styling vs. structure) and the use of TypeScript for props, the component is easy to maintain and extend. The use of comments further enhances readability and understandability.

// 3. **Performance**: By leveraging Astro's build-time rendering and zero JavaScript runtime philosophy, the component maintains high performance. It doesn’t add any client-side JavaScript, keeping the web page lightweight and fast.

// 4. **Reusability**: The component is highly reusable across different parts of an Astro project, thanks to its modular design. Its ability to accept various props and content through slots means it can be adapted to a wide range of use cases.

// 5. **Isolation**: Scoped CSS ensures that the styles of the component don't leak out to affect other elements, and external styles don’t interfere with the component, leading to more predictable styling.

// In summary, the `BaseComponent` in Astro showcases a harmonious integration of dynamic styling, customizability, and modern web development best practices. It’s an exemplary model of how components can be designed to be both versatile and efficient, making it an ideal choice for developers seeking to create adaptable and performant web applications.

// Importing the type HTMLAttributes from Astro for type checking
import type { HTMLAttributes } from "astro/types";

// Defining an interface for the component props, extending HTML attributes for a 'div'
export interface BaseComponentProps extends HTMLAttributes<"div"> {
    borderColor?: string;    // Optional prop for border color
    borderStyle?: string;    // Optional prop for border style
    borderWidth?: string;    // Optional prop for border width
    textColor?: string;      // Optional prop for text color
    backgroundColor?: string;// Optional prop for background color
    outlineColor?: string;   // Optional prop for outline color
    outlineOffset?: string;  // Optional prop for outline offset
    outlineWidth?: string;   // Optional prop for outline width
    padding?: string;        // Optional prop for padding
    classes?: string;        // Optional prop for additional CSS classes
}

// Destructuring the props into individual variables with default values
const {
    borderColor = "var(--monochrome-dark)",
    borderStyle = "var(--border-style-solid)",
    borderWidth = "var(--mesure-small)",
    textColor = "var(--color)",
    backgroundColor = "white",
    outlineColor = "transparent",
    outlineOffset = "calc(var(--mesure-small) * -1)",
    outlineWidth = "var(--mesure-small)",
    padding = "var(--mesure-medium)",
    classes,
    ...rest
} = Astro.props as BaseComponentProps;
---

<!-- The main div of the component, applying styles and classes dynamically -->
<div
    class={`base-component ${classes}`}
    style={`
        --border-color: ${borderColor};
        --border-style: ${borderStyle};
        --border-width: ${borderWidth};
        --text-color: ${textColor};
        --background-color: ${backgroundColor};
        --outline-color: ${outlineColor};
        --outline-offset: ${outlineOffset};
        --outline-width: ${outlineWidth};
        --padding: ${padding};
    `}
    {...rest}
>
    <slot />
</div>

<!-- Scoped CSS for the component, using CSS variables for dynamic styling -->
<style>
    .base-component {
        border-color: var(--border-color);
        border-style: var(--border-style);
        border-width: var(--border-width);
        box-sizing: content-box;
        color: var(--text-color);
        background-color: var(--background-color);
        outline-color: var(--outline-color);
        outline-offset: var(--outline-offset);
        outline-width: var(--outline-width);
        padding: var(--padding);
    }
</style>